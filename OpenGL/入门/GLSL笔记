

//GLSL笔记



uniform:全局变量，如果你声明了一个uniform却在GLSL代码中没用过，编译器会静默移除这个变量,任意着色器在任意阶段访问 



 

练习：

1.	修改顶点着色器让三角形上下颠倒

解答:

原来：gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0)

将aPos.y取负

之后gl_Position = vec4(aPos.x, -aPos.y, aPos.z, 1.0)

2.使用uniform定义一个水平偏移量，在顶点着色器中使用这个偏移量把三角形移动到屏幕右侧


在原有的vertex shader中定义
uniform vec3 offset=vec3(0.5,0,0);
将x的加上偏移量
gl_Position = vec4(aPos.x+offset.x, aPos.y, aPos.z, 1.0);

const char* vertexShaderSource = "#version 330 core\n"
"uniform vec3 offset=vec3(0.5,0,0);\n"
"layout (location = 0) in vec3 aPos;\n"
"void main()\n"
"{\n"
"   gl_Position = vec4(aPos.x+offset.x, aPos.y, aPos.z, 1.0);\n"
"}\0";


3.使用out关键字把顶点位置输出到片段着色器，并将片段的颜色设置为与顶点位置相等（来看看连顶点位置值都在三角形中被插值的结果）。
做完这些后，尝试回答下面的问题：为什么在三角形的左下角是黑的?


const char* vertexShaderSource = "#version 330 core\n"
"layout (location = 0) in vec3 aPos;\n"
"out vec3 vertexpos;\n"//定义输出
"void main()\n"
"{\n"
"   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n"
"   vertexpos=vec3(aPos.x, aPos.y, aPos.z);\n"//也可以写为vertexpos=aPos;
"}\0";

const char* fragmentShaderSource = "#version 330 core\n"
"out vec4 FragColor;\n"
"in vec3 vertexpos;\n"//输入同名变量
"void main()\n"
"{\n"
"   FragColor = vec4(vertexpos.x, vertexpos.y, vertexpos.z, 1.0f);\n"//也可以写为FragColor=vec4(vertexpos,1.0f);
"}\n\0";

左下角颜色坐标是（-0.5f，-0.5f，0.0f）,颜色坐标范围是[0,1],所有当前坐标被解释为：(0,0,0)